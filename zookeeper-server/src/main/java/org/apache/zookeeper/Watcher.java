/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.zookeeper;

import org.apache.yetus.audience.InterfaceAudience;

/**
 * This interface specifies the public interface an event handler class must
 * implement. A ZooKeeper client will get various events from the ZooKeeper
 * server it connects to. An application using such a client handles these
 * events by registering a callback object with the client. The callback object
 * is expected to be an instance of a class that implements Watcher interface.
 *
 */
@InterfaceAudience.Public
public interface Watcher {

    /**
     * This interface defines the possible states an Event may represent
     */
    @InterfaceAudience.Public
    public interface Event {
        /**
         * Enumeration of states the ZooKeeper may be at the event
         */
        @InterfaceAudience.Public
        public enum KeeperState {
            /** Unused, this state is never generated by the server */
            // 未知状态，不再使用，服务器不会产生此状态
            @Deprecated
            Unknown(-1),

            /** The client is in the disconnected state - it is not connected
             * to any server in the ensemble. */
            // 断开连接
            Disconnected(0),

            /** Unused, this state is never generated by the server */
            @Deprecated
            // 未同步连接，不再使用，服务器不会产生此状态
            NoSyncConnected(1),

            /** The client is in the connected state - it is connected
             * to a server in the ensemble (one of the servers specified
             * in the host connection parameter during ZooKeeper client
             * creation). */
            // 同步连接状态
            SyncConnected(3),

            /**
             * Auth failed state
             */
            // 认证失败状态
            AuthFailed(4),

            /**
             * The client is connected to a read-only server, that is the
             * server which is not currently connected to the majority.
             * The only operations allowed after receiving this state is
             * read operations.
             * This state is generated for read-only clients only since
             * read/write clients aren't allowed to connect to r/o servers.
             */
            // 只读连接状态
            ConnectedReadOnly(5),

            /**
             * SaslAuthenticated: used to notify clients that they are SASL-authenticated,
             * so that they can perform Zookeeper actions with their SASL-authorized permissions.
             */
            // SASL认证通过状态
            SaslAuthenticated(6),

            /** The serving cluster has expired this session. The ZooKeeper
             * client connection (the session) is no longer valid. You must
             * create a new client connection (instantiate a new ZooKeeper
             * instance) if you with to access the ensemble. */
            // 过期状态
            Expired(-112),

            /**
             * The client has been closed. This state is never generated by
             * the server, but is generated locally when a client calls
             * {@link ZooKeeper#close()} or {@link ZooKeeper#close(int)}
             */
            // 连接关闭状态
            Closed(7);

            private final int intValue;     // Integer representation of value
            // for sending over wire

            KeeperState(int intValue) {
                this.intValue = intValue;
            }

            public int getIntValue() {
                return intValue;
            }

            public static KeeperState fromInt(int intValue) {
                switch (intValue) {
                    case -1:
                        return KeeperState.Unknown;
                    case 0:
                        return KeeperState.Disconnected;
                    case 1:
                        return KeeperState.NoSyncConnected;
                    case 3:
                        return KeeperState.SyncConnected;
                    case 4:
                        return KeeperState.AuthFailed;
                    case 5:
                        return KeeperState.ConnectedReadOnly;
                    case 6:
                        return KeeperState.SaslAuthenticated;
                    case -112:
                        return KeeperState.Expired;
                    case 7:
                        return KeeperState.Closed;

                    default:
                        throw new RuntimeException("Invalid integer value for conversion to KeeperState");
                }
            }
        }

        /**
         * Enumeration of types of events that may occur on the ZooKeeper
         */
        @InterfaceAudience.Public
        public enum EventType {
            // 无
            None(-1),
            // 结点创建
            NodeCreated(1),
            // 结点删除
            NodeDeleted(2),
            // 结点数据变化
            NodeDataChanged(3),
            // 结点的子节点变化
            NodeChildrenChanged(4),
            // 数据删除
            DataWatchRemoved(5),
            // 子节点删除
            ChildWatchRemoved(6);

            private final int intValue;     // Integer representation of value
            // for sending over wire

            EventType(int intValue) {
                this.intValue = intValue;
            }

            public int getIntValue() {
                return intValue;
            }

            public static EventType fromInt(int intValue) {
                switch (intValue) {
                    case -1:
                        return EventType.None;
                    case 1:
                        return EventType.NodeCreated;
                    case 2:
                        return EventType.NodeDeleted;
                    case 3:
                        return EventType.NodeDataChanged;
                    case 4:
                        return EventType.NodeChildrenChanged;
                    case 5:
                        return EventType.DataWatchRemoved;
                    case 6:
                        return EventType.ChildWatchRemoved;

                    default:
                        throw new RuntimeException("Invalid integer value for conversion to EventType");
                }
            }
        }
    }

    /**
     * Enumeration of types of watchers
     */
    @InterfaceAudience.Public
    public enum WatcherType {
        //监听子节点
        Children(1),
        //监听数据
        Data(2),
        //监听任意变更
        Any(3);

        // Integer representation of value
        private final int intValue;

        private WatcherType(int intValue) {
            this.intValue = intValue;
        }

        public int getIntValue() {
            return intValue;
        }

        public static WatcherType fromInt(int intValue) {
            switch (intValue) {
                case 1:
                    return WatcherType.Children;
                case 2:
                    return WatcherType.Data;
                case 3:
                    return WatcherType.Any;

                default:
                    throw new RuntimeException(
                            "Invalid integer value for conversion to WatcherType");
            }
        }
    }

    abstract public void process(WatchedEvent event);
}
